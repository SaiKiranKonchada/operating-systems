alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

multipush(BP);




alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


alias newPID R2;
alias n R5;
alias k R6;
n=16;
k=16;
while(n!=0)do
 currentPID=currentPID+1;
 process_table_entry = PROCESS_TABLE + ((currentPID)%16) * 16;
 if([process_table_entry + 4 ]== READY)then
     newPID=[process_table_entry + 1 ];
     n=1;
 else
     if([process_table_entry + 4 ]== CREATED)then
        newPID=[process_table_entry + 1 ];
        n=1;
      endif; 
  endif;
  k=k-1;
  n=n-1;
endwhile;
if(k==0)then
   newPID=0;
endif;


alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR

PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	[new_process_table + 9] = 0;
	SP = [new_process_table + 13];
	BP = [new_process_table + 12];
	ireturn;
endif;

[new_process_table + 4] = RUNNING;

SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;

multipop(BP);

return;
